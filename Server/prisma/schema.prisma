generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id           String   @id @default(uuid())
  title        String
  description  String
  price        Float
  rating       Float   @default(0.0)
  totalReviews Int     @default(0)
  createdAt    DateTime @default(now())

  images     Image[]
  reviews    Review[]
  categories CategoryOnProduct[]
  wishlist   Wishlist[]
  cart       Cart[]
  orderItems OrderItem[]
}

model Image {
  id        String   @id @default(uuid())
  productId String
  imageUrl  String
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  stars     Int
  comment   String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}
model User {
  id         String  @id @default(uuid())
  email      String  @unique
  password   String
  name       String
  pictureUrl String?
  role  Role   @default(USER)
  createdAt  DateTime @default(now())

  wishlist Wishlist[]
  cart     Cart[]
  orders   Order[]
  reviews  Review[]
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Prevents duplicate wishlist entries
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Prevents duplicate cart entries
}

model Order {
  id            String    @id @default(uuid())
  userId        String
  email         String
  phoneNo       String
  address       String
  city          String
  state         String
  country       String
  pincode       String
  itemsPrice    Float
  taxPrice      Float
  shippingPrice Float
  totalPrice    Float
  paymentId     String
  paymentStatus String
  paidAt        DateTime?
  orderStatus   String  @default("Pending")
  deliveredAt   DateTime?
  createdAt     DateTime  @default(now())

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  products CategoryOnProduct[]
}

model CategoryOnProduct {
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId]) // Composite key for many-to-many relation
}
